


    1. Создайте CMakeList.txt для библиотеки banking. Настройка git-репозитория hw04 для работы

					% git remote remove origin
					% hub create
					Updating origin
					https://github.com/MargoRT8921/lab05
					% git push -u origin master

Cоздание CMakeLists.txt

					% cat >> CMakeLists.txt <<EOF
					cmake_minimum_required(VERSION 3.10)
					project(banking)

					set(CMAKE_CXX_STANDARD 17)
					set(CMAKE_CXX_STANDARD_REQUIRED ON)

					add_library(account STATIC banking/Account.cpp)
					target_include_directories(account
					 PUBLIC \${CMAKE_CURRENT_SOURCE_DIR}/banking)

					add_library(transaction STATIC banking/Transaction.cpp)
					target_include_directories(account
					 PUBLIC \${CMAKE_CURRENT_SOURCE_DIR}/banking)
					 target_link_libraries(transaction account)
					EOF

Подключение к репозиторию Google Test, выбор версии с помощью переключения ветки

			% mkdir third-party
			# Клонирование репозитория Google к своему репозиторию как подмодуль(проект в проекте)
			% git submodule add https://github.com/google/googletest third-party/gtest
			remote: Enumerating objects: 20049, done.
			remote: Total 20049 (delta 0), reused 0 (delta 0), pack-reused 20049
			Receiving objects: 100% (20049/20049), 7.33 MiB | 2.01 MiB/s, done.
			Resolving deltas: 100% (14816/14816), done.
			% cd third-party/gtest && git checkout release-1.10.0 && cd ../..
			% git add third-party/gtest

Модифицируем CMakeList.txt

# Вставка текста в файл после строки
# Добавление опции для сборки тестов
% sed -i "" '/set(CMAKE_CXX_STANDARD_REQUIRED ON)/a\
option(BUILD_TESTS "Build tests" OFF)
' CMakeLists.txt
# Добавление сборки тестов
% cat >> CMakeLists.txt <<EOF

if(BUILD_TESTS)
  # Включить поддержку тестирования:
  enable_testing()
  add_subdirectory(third-party/gtest)
  # Создание списка файлов, соответствующих выражению и сохранение его в переменную
  file(GLOB \${PROJECT_NAME}_TEST_SOURCES tests/*.cpp)
  add_executable(check \${\${PROJECT_NAME}_TEST_SOURCES})
  target_link_libraries(check account transaction gtest_main gmock_main)
  # Добавление тестов к проекту
  add_test(NAME check COMMAND check)
endif()
EOF

    2. Создайте модульные тесты на классы Transaction и Account.
        Используйте mock-объекты.
        Покрытие кода должно составлять 100%. Создание тестов для класса Account

% cat >> tests/test1.cpp <<EOF
#include <Account.h>
#include <gtest/gtest.h>
// Тест на проверку правильности конструктора
TEST(Account, Constructor)
{
Account a(2,300);

EXPECT_EQ(a.id(),2);
EXPECT_EQ(a.GetBalance(),300);
}
// Тест на проверку правильность изменения баланса
TEST(Account, ChangeBalance)
{
  Account a(2,300);
  a.Lock();
  a.ChangeBalance(100);
  EXPECT_EQ(a.GetBalance(),400);
}
// Тест на проверку состояния аккаунта(открыт/закрыт)
TEST(Account, Lock)
{
  Account a(2,300);
  a.Lock();
  a.ChangeBalance(100);
  a.Unlock();
  EXPECT_EQ(a.GetBalance(),400);
}
EOF

Создание тестов для класса Transaction && применение mock-объектов

% cat >> tests/test2.cpp <<EOF
//
// Created by Евгений Григорьев on 20.04.2020.
//
#include <Account.h>
#include <Transaction.h>
#include <gmock/gmock.h>
#include <gtest/gtest.h>
// Создание mock-класса
class MockAccount : public Account {
public:
  MockAccount(){};
  MOCK_METHOD(int, GetBalance, (), (const, override));
  MOCK_METHOD(int, id, (), (const));
};
// Пример использования mock-объектов
TEST(Transaction, MakeTransaction) {

  MockAccount from;
  MockAccount to;
  Transaction transaction1;

  // Установка поведения
  EXPECT_CALL(from, id()).WillOnce(testing::Return(1));
  EXPECT_CALL(from, GetBalance()).WillOnce(testing::Return(1000));
  EXPECT_CALL(to, id()).WillOnce(testing::Return(2));
  EXPECT_CALL(to, GetBalance()).WillOnce(testing::Return(100));
  EXPECT_TRUE(transaction1.Make(Account(from.id(), from.GetBalance()),
                                Account(to.id(), to.GetBalance()), 500));
}
// Проценты за перевод
TEST(Transaction, Fee){
  Transaction transaction1;
  EXPECT_EQ(transaction1.fee(),1);
  transaction1.set_fee(3);
  EXPECT_EQ(transaction1.fee(),3);
  EXPECT_TRUE(transaction1.Make(Account(3, 1000),
                                Account(4,100), 500));
}
EOF

Сборка проекта

# Генерация файлов для сборки с тестом
$ cmake -H. -B_build -DBUILD_TESTS=ON

$ cmake --build _build

$ cmake --build _build --target test


Запуск тестов

$ _build/check





