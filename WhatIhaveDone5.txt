
	1.  Создайте CMakeList.txt для библиотеки banking.

$ cat > banking/CMakeLists.txt <<EOF
project(banking_lib)

if (NOT TARGET libbanking)
    add_library(libbanking STATIC
        ${CMAKE_CURRENT_LIST_DIR}/Account.cpp
        ${CMAKE_CURRENT_LIST_DIR}/Transaction.cpp
    )

    install(TARGETS libbanking
        ARCHIVE DESTINATION lib
        LIBRARY DESTINATION lib
    )
endif(NOT TARGET libbanking)

include_directories(${CMAKE_CURRENT_LIST_DIR})
EOF

	2.  Создайте модульные тесты на классы Transaction и Account.
        Используйте mock-объекты.
        Покрытие кода должно составлять 100%.

Было решено создать два файла для тестирoвания: test_account.cpp и test_transaction.cpp. Полное решение пункта:

$ mkdir banking/tests/
$ cat > banking/tests/test_account.cpp <<EOF
#include "Account.h"
#include "Transaction.h"

#include <gtest/gtest.h>
#include <gmock/gmock.h>

using testing::_;

class AccountMock : public Account {
public:
    explicit AccountMock(int id, int balance) : Account(id, balance) {}
    MOCK_CONST_METHOD0(GetBalance, int());
    MOCK_METHOD1(ChangeBalance, void(int diff));
    MOCK_METHOD0(Lock, void());
    MOCK_METHOD0(Unlock, void());
}; // class AccountMock

TEST(Account, Mock) {
    AccountMock acc(1, 666);
    EXPECT_CALL(acc, GetBalance()).Times(1);
    EXPECT_CALL(acc, ChangeBalance(_)).Times(2);
    EXPECT_CALL(acc, Lock()).Times(2);
    EXPECT_CALL(acc, Unlock()).Times(1);
    acc.GetBalance();
    acc.ChangeBalance(100);
    acc.Lock();
    acc.ChangeBalance(100);
    acc.Lock();
    acc.Unlock();
}

TEST(Account, TestAccount) {
    Account acc(1, 666);
    EXPECT_EQ(acc.id(), 1);
    EXPECT_EQ(acc.GetBalance(), 666);
    EXPECT_THROW(acc.ChangeBalance(200), std::runtime_error);
    EXPECT_NO_THROW(acc.Lock());
    acc.ChangeBalance(200);
    EXPECT_EQ(acc.GetBalance(), 866);
    EXPECT_THROW(acc.Lock(), std::runtime_error);
    EXPECT_NO_THROW(acc.Unlock());
}
EOF
$ cat > banking/tests/test_transaction.cpp <<EOF
#include "Account.h"
#include "Transaction.h"

#include <gtest/gtest.h>
#include <gmock/gmock.h>

using testing::_;

class TransactionMock : public Transaction {
public:
    MOCK_METHOD3(Make, bool(Account& from, Account& to, int sum));
}; // class TransactionMock

TEST(Transaction, Mock) {
    TransactionMock tr;
    Account acc1(1, 100);
    Account acc2(2, 300);

    EXPECT_CALL(tr, Make(_, _, _)).Times(5);
    tr.set_fee(200);
    tr.Make(acc1, acc2, 200);
    tr.Make(acc2, acc1, 300);
    // throws
    tr.Make(acc2, acc1, 50);
    tr.Make(acc2, acc1, 0);
    tr.Make(acc1, acc2, -8);
}

TEST(Transaction, TestTransaction) {
    Transaction tr;
    Account a1(1, 100), a2(2, 300);
    tr.set_fee(10);
    EXPECT_EQ(tr.fee(), 10);
    EXPECT_THROW(tr.Make(a1, a2, 90), std::logic_error);
    EXPECT_THROW(tr.Make(a1, a2, -1), std::invalid_argument);
    EXPECT_THROW(tr.Make(a1, a1, 100), std::logic_error);
    EXPECT_FALSE(tr.Make(a1, a2, 400));
    EXPECT_FALSE(tr.Make(a2, a1, 300));
    EXPECT_TRUE(tr.Make(a2, a1, 246));
}
EOF

После следует создать CMakeLists.txt для всего проекта.

$ cat > CMakeLists.txt <<EOF
project(banking)

cmake_minimum_required(VERSION 3.4)

set(CMAKE_CXX_STANDART 11)
set(CMAKE_CXX_STANDART_REQUIRED ON)

option(BUILD_TESTS "Build tests" OFF)

option(COVERAGE ON)

include(${CMAKE_CURRENT_SOURCE_DIR}/banking/CMakeLists.txt)

if (BUILD_TESTS)
    enable_testing()
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/third-party/gtest)
    if (TARGET libbanking)
        # test Account module
        add_executable(check_account ${CMAKE_CURRENT_SOURCE_DIR}/banking/tests/test_account.cpp)
        target_link_libraries(check_account libbanking gtest_main gmock_main)
        add_test(NAME account COMMAND check_account)

        # test Transaction module
        add_executable(check_transaction ${CMAKE_CURRENT_SOURCE_DIR}/banking/tests/test_transaction.cpp)
        target_link_libraries(check_transaction libbanking gtest_main gmock_main)
        add_test(NAME transaction COMMAND check_transaction)

        if (COVERAGE)
            target_compile_options(check_account PRIVATE --coverage)
            target_compile_options(check_transaction PRIVATE --coverage)

            target_link_libraries(check_account --coverage)
            target_link_libraries(check_transaction --coverage)
        endif(COVERAGE)
    endif(TARGET libbanking)
endif(BUILD_TESTS)
EOF

Этот пункт был сделан заранее, учитывая №4.















































































	3.   Настройте сборочную процедуру на TravisCI. Создадим файл .travis.yml, чтобы настроить процедуру сборки на Travis CI. Это можно сделать следующим образом:

$ cat > .travis.yml <<EOF
os:
    -linux

addons:
    apt:
        - cmake
        - cmake-data

language: cpp

compiler:
    - clang
    - gcc

before_install:
    - pip install --user cpp-coveralls

script:
    - cmake -H. -Bbuild -DBUILD_TESTS=ON -DCOVERAGE=ON
    - cmake --build build/
    - cmake --build build --target test -- ARGS=--verbose

after_success:
    - coveralls --root . -E ".*gtest.*" -E ".*CMakeFiles.*"
EOF

Конфигурация тоже была составлена исходя из требований 4 пункта.

	4. Настройте Coveralls.io.

Ссылка на репозиторий со сделанными заданиями: Homework

Стоит отметить, что здесь не обошлось без ошибок в задании. Ошибка содержится в файле Transaction.cpp. Ошибка в логике программы: при совершении платежа деньги не снимаются у аккаунта, который совершает платеж, таким образом, получатель платежа оставался в минусе на сумму комиссии от перевода. Для исправления этой ошибки было сделано следующее:

$ ex -sc ":%s/Debit(to, sum + fee_)/Debit(from, sum + fee_)/g" -cx Transaction.cpp
